/*

Parameter Sniffing:

In SQL Server, parameter sniffing is a concept where the initial parameter values passed to a 
stored procedure or query can drastically impact the execution plan generated by the query optimizer. 

This occurs because SQL Server compiles and optimizes the query plan based on the specific parameter 
values it encounters first. While parameter sniffing is typically advantageous as it enables SQL Server 
to create query plans suited to specific data distributions, it can occasionally result in suboptimal performance 
if subsequent parameter values differ significantly from the initial ones.

*/

CREATE PROCEDURE GetOrdersByCustomerID
    @CustomerID INT
AS
BEGIN
    SELECT *
    FROM Orders
    WHERE CustomerID = @CustomerID;
END;

GO;

/*

In this above example, when you execute this SP with specific '@CustomerID', then the SQL Server will generate
an execution plan for the provided '@CustomerID' 

If we call the same SP with a different '@CustomerID' and the data is different, the cached plan might not be optimal

*/

-- Ways to counter this

-- Use Local variable

CREATE PROCEDURE GetOrdersByCustomerID
    @CustomerID INT
AS
BEGIN
    DECLARE @LocalCustomerID INT = @CustomerID; -- LOCAL VARIABLE

    SELECT *
    FROM Orders
    WHERE CustomerID = @LocalCustomerID;
END;


GO;


-- Use OPTION (RECOMPILE)

CREATE PROCEDURE GetOrdersByCustomerID
    @CustomerID INT
AS
BEGIN
    SELECT *
    FROM Orders
    WHERE CustomerID = @CustomerID
    OPTION (RECOMPILE); -- Everytime this will get compiled 
END;

GO;

-- Use OPTION (OPTIMIZE FOR UNKNOWN)

/*
https://learn.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-query?view=sql-server-ver16
Specifies that the Query Optimizer uses statistical data instead of the 
initial value to determine the value for a local variable during query optimization.
*/

CREATE PROCEDURE GetOrdersByCustomerID
    @CustomerID INT
AS
BEGIN
    SELECT *
    FROM Orders
    WHERE CustomerID = @CustomerID
    OPTION (OPTIMIZE FOR UNKNOWN)
END;

GO;